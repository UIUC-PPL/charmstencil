module stencil
{
    readonly CProxy_CodeGenCache codegen_proxy;

    message PersistentMsg;

    nodegroup CodeGenCache
    {
        entry CodeGenCache();

        entry [reductiontarget] void start_time(double time);

        entry [reductiontarget] void end_time(double time);
    };

    array [3D] Stencil
    {
        entry Stencil(uint8_t name_, uint32_t ndims, uint32_t dims[ndims], uint32_t odf);

        entry void init_recv(int dir, CkDevicePersistent p_buf);

        entry void receive_graph(int epoch, int size, char cmd[size]);

        entry void execute_graph(int epoch, int size, char cmd[size]);

        entry void receive_ghost(PersistentMsg* msg);

        entry [reductiontarget] void start()
        {
            while (EPOCH > -1)
            {
                when receive_graph[EPOCH] (int epoch, int size, char cmd[size])
                    serial "execute graph" {
                        execute_graph(epoch, size, cmd);
                    }
            }
        };

        entry [threaded] void wait(ck::future<bool> done);

        // entry void iterate(uint8_t gid)
        // {
        //     while (num_ghost_recv < num_nbrs)
        //     {
        //         when receive_ghost(uint8_t fname, int dir, int size, double data[size])
        //             serial "process_ghost" {
        //                 process_ghost(fname, dir, size, data);
        //                 num_ghost_recv++;
        //             }
        //     }
        //     serial "done_exchange" {
        //         num_ghost_recv = 0;
        //         call_compute(gid);
        //         run_next_iteration();
        //     }
        // };
    };
}
